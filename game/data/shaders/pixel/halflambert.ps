
varying vec2 v_texCoord;

uniform sampler2D albedoTexture;
uniform sampler2D normalTexture;
uniform sampler2D depthTexture;
uniform sampler2D wrapTexture;
uniform vec3 lightPosition;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 viewProjection;
uniform mat4 projectedToWorld;
uniform mat4 viewToWorld;
uniform mat4 worldToShadowMap;
uniform vec4 proj;

vec4 restoreWorldPosition2()
{
    float x = v_texCoord.x * 2 - 1;
    float y = v_texCoord.y * 2 - 1;
    float z = texture2D(depthTexture, v_texCoord).x * 2 - 1;
    vec4 projectedPos = vec4(x, y, z, 1);
    vec4 pos = inverse(projection) * projectedPos;
    return pos / pos.w;
}

vec4 restoreWorldPosition()
{
    float z = texture2D(depthTexture, v_texCoord).x * 2 - 1;
    vec2 ndcTex = vec2(
        v_texCoord.x * 2 - 1,
        v_texCoord.y * 2 - 1
    );
    
    float viewDepth = proj.w / (z - proj.z);

    return vec4(ndcTex * viewDepth / proj.xy, viewDepth, 1);
}

void main()
{	
    //vec4 pos = restoreWorldPosition2();
    //pos = inverse(view) * pos;
    //gl_FragColor = pos;
    
    vec4 albedo = texture2D(albedoTexture, v_texCoord);
    vec3 normal = texture2D(normalTexture, v_texCoord).rgb * 2 - 1;
    
    //normalize(lightPosition)
    
    vec3 lightDir = normalize(lightPosition);
    
    float d = dot(normal, lightDir) / 2 + 0.5;
    vec4 diffuse = texture2D(wrapTexture, vec2(d, 0));
    
    vec4 color = albedo * diffuse;
    
    gl_FragColor = color;
}


    